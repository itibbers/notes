(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{64:function(v,_,t){"use strict";t.r(_);var e=t(0),l=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"浏览器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器"}},[v._v("#")]),v._v(" 浏览器")]),v._v(" "),t("p"),t("div",{staticClass:"table-of-contents"},[t("ul",[t("li",[t("a",{attrs:{href:"#从输入url到展示的过程"}},[v._v("从输入URL到展示的过程")])]),t("li",[t("a",{attrs:{href:"#重绘与回流"}},[v._v("重绘与回流")])]),t("li",[t("a",{attrs:{href:"#web-worker"}},[v._v("Web Worker")])]),t("li",[t("a",{attrs:{href:"#v8垃圾回收机制"}},[v._v("V8垃圾回收机制")])]),t("li",[t("a",{attrs:{href:"#内存泄露"}},[v._v("内存泄露")])])])]),t("p"),v._v(" "),t("h2",{attrs:{id:"从输入url到展示的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从输入url到展示的过程"}},[v._v("#")]),v._v(" 从输入URL到展示的过程")]),v._v(" "),t("ul",[t("li",[v._v("DNS 解析")]),v._v(" "),t("li",[v._v("TCP 三次握手")]),v._v(" "),t("li",[v._v("发送请求，分析 url，设置请求报文(头，主体)")]),v._v(" "),t("li",[v._v("服务器返回请求的文件 (html)")]),v._v(" "),t("li",[v._v("浏览器渲染\n"),t("ul",[t("li",[v._v("HTML parser --\x3e DOM Tree\n"),t("ul",[t("li",[v._v("标记化算法，进行元素状态的标记")]),v._v(" "),t("li",[v._v("dom 树构建")])])]),v._v(" "),t("li",[v._v("CSS parser --\x3e Style Tree\n"),t("ul",[t("li",[v._v("解析 css 代码，生成样式树")])])]),v._v(" "),t("li",[v._v("attachment --\x3e Render Tree\n"),t("ul",[t("li",[v._v("结合 dom树 与 style树，生成渲染树")])])]),v._v(" "),t("li",[v._v("layout: 布局")]),v._v(" "),t("li",[v._v("GPU painting: 像素绘制页面")])])])]),v._v(" "),t("h2",{attrs:{id:"重绘与回流"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#重绘与回流"}},[v._v("#")]),v._v(" 重绘与回流")]),v._v(" "),t("p",[v._v("当元素的样式发生变化时，浏览器需要触发更新，重新绘制元素。这个过程中，有两种类型的操作，即重绘与回流。")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("重绘(repaint)")]),v._v(": 当元素样式的改变不影响布局时，浏览器将使用重绘对元素进行更新，此时由于只需要UI层面的重新像素绘制，因此 "),t("strong",[v._v("损耗较少")])]),v._v(" "),t("li",[t("strong",[v._v("回流(reflow)")]),v._v(": 当元素的尺寸、结构或触发某些属性时，浏览器会重新渲染页面，称为回流。此时，浏览器需要重新经过计算，计算后还需要重新页面布局，因此是较重的操作。会触发回流的操作:\n"),t("ul",[t("li",[v._v("页面初次渲染")]),v._v(" "),t("li",[v._v("浏览器窗口大小改变")]),v._v(" "),t("li",[v._v("元素尺寸、位置、内容发生改变")]),v._v(" "),t("li",[v._v("元素字体大小变化")]),v._v(" "),t("li",[v._v("添加或者删除可见的 dom 元素")]),v._v(" "),t("li",[v._v("激活 CSS 伪类（例如：:hover）")]),v._v(" "),t("li",[v._v("查询某些属性或调用某些方法\n"),t("ul",[t("li",[v._v("clientWidth、clientHeight、clientTop、clientLeft")]),v._v(" "),t("li",[v._v("offsetWidth、offsetHeight、offsetTop、offsetLeft")]),v._v(" "),t("li",[v._v("scrollWidth、scrollHeight、scrollTop、scrollLeft")]),v._v(" "),t("li",[v._v("getComputedStyle()")]),v._v(" "),t("li",[v._v("getBoundingClientRect()")]),v._v(" "),t("li",[v._v("scrollTo()")])])])])])]),v._v(" "),t("p",[t("strong",[v._v("回流必定触发重绘，重绘不一定触发回流。重绘的开销较小，回流的代价较高。")])]),v._v(" "),t("h4",{attrs:{id:"最佳实践"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#最佳实践"}},[v._v("#")]),v._v(" 最佳实践:")]),v._v(" "),t("ul",[t("li",[v._v("css\n"),t("ul",[t("li",[v._v("避免使用"),t("code",[v._v("table")]),v._v("布局")]),v._v(" "),t("li",[v._v("将动画效果应用到"),t("code",[v._v("position")]),v._v("属性为"),t("code",[v._v("absolute")]),v._v("或"),t("code",[v._v("fixed")]),v._v("的元素上")])])]),v._v(" "),t("li",[v._v("javascript\n"),t("ul",[t("li",[v._v("避免频繁操作样式，可汇总后统一 "),t("strong",[v._v("一次修改")])]),v._v(" "),t("li",[v._v("尽量使用"),t("code",[v._v("class")]),v._v("进行样式修改")]),v._v(" "),t("li",[v._v("减少"),t("code",[v._v("dom")]),v._v("的增删次数，可使用 "),t("strong",[v._v("字符串")]),v._v(" 或者 "),t("code",[v._v("documentFragment")]),v._v(" 一次性插入")]),v._v(" "),t("li",[v._v("极限优化时，修改样式可将其"),t("code",[v._v("display: none")]),v._v("后修改")]),v._v(" "),t("li",[v._v("避免多次触发上面提到的那些会触发回流的方法，可以的话尽量用 "),t("strong",[v._v("变量存住")])]),v._v(" "),t("li",[v._v("dom.focus()触发动画执行")])])])]),v._v(" "),t("h2",{attrs:{id:"web-worker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#web-worker"}},[v._v("#")]),v._v(" Web Worker")]),v._v(" "),t("p",[v._v("现代浏览器为"),t("code",[v._v("JavaScript")]),v._v("创造的 "),t("strong",[v._v("多线程环境")]),v._v("。可以新建并将部分任务分配到"),t("code",[v._v("worker")]),v._v("线程并行运行，两个线程可 "),t("strong",[v._v("独立运行，互不干扰")]),v._v("，可通过自带的 "),t("strong",[v._v("消息机制")]),v._v(" 相互通信。")]),v._v(" "),t("p",[t("strong",[v._v("基本用法:")])]),v._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[v._v("// 创建 worker\nconst worker = new Worker('work.js');\n\n// 向主进程推送消息\nworker.postMessage('Hello World');\n\n// 监听主进程来的消息\nworker.onmessage = function (event) {\n  console.log('Received message ' + event.data);\n}\n复制代码\n")])])]),t("p",[t("strong",[v._v("限制:")])]),v._v(" "),t("ul",[t("li",[v._v("同源限制")]),v._v(" "),t("li",[v._v("无法使用 "),t("code",[v._v("document")]),v._v(" / "),t("code",[v._v("window")]),v._v(" / "),t("code",[v._v("alert")]),v._v(" / "),t("code",[v._v("confirm")])]),v._v(" "),t("li",[v._v("无法加载本地资源")])]),v._v(" "),t("h2",{attrs:{id:"v8垃圾回收机制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#v8垃圾回收机制"}},[v._v("#")]),v._v(" V8垃圾回收机制")]),v._v(" "),t("p",[v._v("垃圾回收: 将内存中不再使用的数据进行清理，释放出内存空间。V8 将内存分成 "),t("strong",[v._v("新生代空间")]),v._v(" 和 "),t("strong",[v._v("老生代空间")]),v._v("。")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("新生代空间：用于存活较短的对象")]),v._v(" "),t("ul",[t("li",[v._v("又分成两个空间: from 空间 与 to 空间")]),v._v(" "),t("li",[v._v("Scavenge GC算法: 当 from 空间被占满时，启动 GC 算法\n"),t("ul",[t("li",[v._v("存活的对象从 from space 转移到 to space")]),v._v(" "),t("li",[v._v("清空 from space")]),v._v(" "),t("li",[v._v("from space 与 to space 互换")]),v._v(" "),t("li",[v._v("完成一次新生代GC")])])])])]),v._v(" "),t("li",[t("p",[v._v("老生代空间：用于存活时间较长的对象")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("从 新生代空间 转移到 老生代空间 的条件")]),v._v(" "),t("ul",[t("li",[v._v("经历过一次以上 Scavenge GC 的对象")]),v._v(" "),t("li",[v._v("当 to space 体积超过25%")])])]),v._v(" "),t("li",[t("p",[v._v("标记清除算法")]),v._v(" "),t("p",[v._v(": 标记存活的对象，未被标记的则被释放")]),v._v(" "),t("ul",[t("li",[v._v("增量标记: 小模块标记，在代码执行间隙执，GC 会影响性能")]),v._v(" "),t("li",[v._v("并发标记(最新技术): 不阻塞 js 执行")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("压缩算法")]),v._v(": 将内存中清除后导致的碎片化对象往内存堆的一端移动，解决 "),t("strong",[v._v("内存的碎片化")])])])])])]),v._v(" "),t("h2",{attrs:{id:"内存泄露"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#内存泄露"}},[v._v("#")]),v._v(" 内存泄露")]),v._v(" "),t("ul",[t("li",[v._v("意外的"),t("strong",[v._v("全局变量")]),v._v(": 无法被回收")]),v._v(" "),t("li",[t("strong",[v._v("定时器")]),v._v(": 未被正确关闭，导致所引用的外部变量无法被释放")]),v._v(" "),t("li",[t("strong",[v._v("事件监听")]),v._v(": 没有正确销毁 (低版本浏览器可能出现)")]),v._v(" "),t("li",[t("strong",[v._v("闭包")]),v._v(": 会导致父级中的变量无法被释放")]),v._v(" "),t("li",[t("strong",[v._v("dom 引用")]),v._v(": dom 元素被删除时，内存中的引用未被正确清空")])]),v._v(" "),t("p",[v._v("可用 chrome 中的 timeline 进行内存标记，可视化查看内存的变化情况，找出异常点。")])])}),[],!1,null,null,null);_.default=l.exports}}]);